from flask import Flask, render_template
import math
import ebaysdk
from ebaysdk.finding import Connection as finding
from bs4 import BeautifulSoup   

app = Flask(__name__)

#function that determins how well pictures match, returns value between 0 and 1
def cosine_similarity(v1,v2):
    "compute cosine similarity of v1 to v2: (v1 dot v2)/{||v1||*||v2||)"
    sumxx, sumxy, sumyy = 0, 0, 0
    for i in range(len(v1)):
        x = v1[i]; y = v2[i]
        sumxx += x*x
        sumyy += y*y
        sumxy += x*y
    return sumxy/math.sqrt(sumxx*sumyy)


@app.route('/')
def hello_world():
    return render_template('page1.html')

@app.route('/analyze')
def analyze():
    # match functio is called cosine_similarity
    #result1 = match(img_ideal_pose, img1)
    # result2 = match(img_ideal_pose, img2)
    # best_score = max(result1, result2)
    

    #perfect pose vector
    vpp=[0.48148148148148145, 0.08695652173913043, 0.48148148148148145, 0.19021739130434784, 0.35648148148148145, 0.19021739130434784, 0.2037037037037037, 0.29347826086956524, 0.30092592592592593, 0.375, 0.6157407407407407, 0.18478260869565216, 0.7777777777777778, 0.30978260869565216, 0.6759259259259259, 0.3967391304347826, 0.4212962962962963, 0.46195652173913043, 0.4027777777777778, 0.6956521739130435, 0.37037037037037035, 0.9184782608695652, 0.5601851851851852, 0.45108695652173914, 0.6018518518518519, 0.6956521739130435, 0.6435185185185185, 0.9130434782608695, 0.46296296296296297, 0.07065217391304347, 0.5, 0.07065217391304347, 0.4305555555555556, 0.08152173913043478, 0.5324074074074074, 0.08695652173913043]
    #Stewart up 
    vs1=[0.5555555555555556, 0.18478260869565216, 0.5277777777777778, 0.27717391304347827, 0.4166666666666667, 0.2608695652173913, 0.25, 0.21195652173913043, 0.19444444444444445, 0.08152173913043478, 0.6157407407407407, 0.30434782608695654, 0.7361111111111112, 0.3858695652173913, 0.6712962962962963, 0.30434782608695654, 0.39351851851851855, 0.5163043478260869, 0.37962962962962965, 0.7010869565217391, 0.36574074074074076, 0.8369565217391305, 0.5185185185185185, 0.5380434782608695, 0.5324074074074074, 0.6902173913043478, 0.5370370370370371, 0.8315217391304348, 0.5416666666666666, 0.16847826086956522, 0.5787037037037037, 0.1793478260869565, 0.5092592592592593, 0.1793478260869565, 0.6018518518518519, 0.20652173913043478]
    #Stewart superman
    vs=[0.4722222222222222, 0.125, 0.4675925925925926, 0.25, 0.33796296296296297, 0.25, 0.2361111111111111, 0.3423913043478261, 0.3101851851851852, 0.44021739130434784, 0.5833333333333334, 0.2608695652173913, 0.6759259259259259, 0.3641304347826087, 0.6111111111111112, 0.44021739130434784, 0.37962962962962965, 0.5108695652173914, 0.37037037037037035, 0.6684782608695652, 0.3472222222222222, 0.8260869565217391, 0.5231481481481481, 0.5108695652173914, 0.5416666666666666, 0.6847826086956522, 0.5370370370370371, 0.8206521739130435, 0.4537037037037037, 0.11413043478260869, 0.49537037037037035, 0.11413043478260869, 0.4166666666666667, 0.1358695652173913, 0.5277777777777778, 0.14130434782608695]
    #Maria  superman
    vm=[0.49537037037037035, 0.2608695652173913, 0.5, 0.3423913043478261, 0.42592592592592593, 0.3423913043478261, 0.30092592592592593, 0.41304347826086957, 0.38425925925925924, 0.483695652173913, 0.5833333333333334, 0.34782608695652173, 0.6944444444444444, 0.42934782608695654, 0.6018518518518519, 0.4891304347826087, 0.44907407407407407, 0.532608695652174, 0.4444444444444444, 0.7010869565217391, 0.44907407407407407, 0.8369565217391305, 0.5462962962962963, 0.532608695652174, 0.5648148148148148, 0.7065217391304348, 0.5787037037037037, 0.842391304347826, 0.4861111111111111, 0.25, 0.5185185185185185, 0.25, 0.4675925925925926, 0.266304347826087, 0.5555555555555556, 0.2717391304347826]
    #Eric superman
    ve=[0.48148148148148145, 0.14673913043478262, 0.4675925925925926, 0.266304347826087, 0.37037037037037035, 0.2717391304347826, 0.2916666666666667, 0.33695652173913043, 0.3472222222222222, 0.41304347826086957, 0.5694444444444444, 0.266304347826087, 0.6944444444444444, 0.34782608695652173, 0.5925925925925926, 0.42934782608695654, 0.39351851851851855, 0.5163043478260869, 0.33796296296296297, 0.7065217391304348, 0.3425925925925926, 0.842391304347826, 0.5138888888888888, 0.5217391304347826, 0.5370370370370371, 0.6956521739130435, 0.5416666666666666, 0.8532608695652174, 0.4583333333333333, 0.13043478260869565, 0.5, 0.13043478260869565, 0.41203703703703703, 0.16847826086956522, 0.5138888888888888, 0.15217391304347827]
    result1 = cosine_similarity(vpp,vs1)
    result2= cosine_similarity(vpp,vs)
    result3 = cosine_similarity(vpp,vm)
    result4= cosine_similarity(vpp,ve)

    print(cosine_similarity(vpp,vs1))
    print(cosine_similarity(vpp,vs))
    print(cosine_similarity(vpp,vm))
    print(cosine_similarity(vpp,ve))

    winner = 0          # default value
    # if best_score == result1:
    #     winner = 1
    # else
    #     winner = 2

    #invoke ebay api
    api = finding(appid='MariaZyr-SuperPos-PRD-216de56b6-02ba6e3f',config_file=None)

    api_request = {'keywords': 'children Superman costume'}

    response = api.execute('findItemsByKeywords', api_request)

    soup = BeautifulSoup(response.content, 'lxml')

    items = soup.find_all('item')

#input(items[0])

    for item in items:
        title= item.title.string.lower().strip()
        url = item.viewitemurl.string.lower()
    print(title)
    print(url)

    return render_template('page2.html', winner=1)